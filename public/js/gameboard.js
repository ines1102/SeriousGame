import socketManager from "./socketManager.js";

document.addEventListener("DOMContentLoaded", async () => {
    console.log("üîÑ Initialisation du jeu...");

    try {
        // ‚úÖ Attendre que le socket soit pr√™t
        const socket = await socketManager.getSocket();

        let userName = sessionStorage.getItem("userName");
        let userAvatar = sessionStorage.getItem("userAvatar");
        let roomId = sessionStorage.getItem("roomId");

        console.log("üìå V√©rification des donn√©es avant connexion :", { roomId, userName, userAvatar });

        if (!userName || !userAvatar || !roomId) {
            console.error("‚ùå Donn√©es de session incompl√®tes, retour √† l'accueil.");
            alert("Erreur : Donn√©es utilisateur manquantes. Retour √† l'accueil.");
            window.location.href = "/";
            return;
        }

        console.log(`üìå Connexion en cours pour ${userName} avec avatar ${userAvatar} dans la room ${roomId}`);

        // ‚úÖ √âmettre la connexion au jeu
        socket.emit("join_game", { roomId, name: userName, avatar: userAvatar });

        /** üéÆ D√©but du jeu */
        socket.on("game_start", (gameData) => {
            console.log("‚úÖ Game start re√ßu :", gameData);

            if (!gameData.opponent) {
                console.warn("‚ö†Ô∏è Aucun adversaire trouv√© !");
                return;
            }

            console.log(`üéÆ D√©but du jeu pour ${userName}. Adversaire : ${gameData.opponent.name}`);

            // Mise √† jour de l'interface joueur et adversaire
            document.querySelector(".player-name").textContent = userName;
            document.querySelector(".player-avatar img").src = userAvatar;

            document.querySelector(".opponent-name").textContent = gameData.opponent.name;
            document.querySelector(".opponent-avatar img").src = gameData.opponent.avatar;
        });

        /** üìå Gestion des cartes */
        function displayHand(deck, handContainer) {
            handContainer.innerHTML = "";
            deck.forEach(card => {
                const cardElement = document.createElement("img");
                cardElement.src = card.name;
                cardElement.classList.add("card");
                handContainer.appendChild(cardElement);
            });
        }

        function displayOpponentHand(deck, handContainer) {
            handContainer.innerHTML = "";
            for (let i = 0; i < deck.length; i++) {
                const cardElement = document.createElement("div");
                cardElement.classList.add("card-back");
                handContainer.appendChild(cardElement);
            }
        }

        /** üîÑ Gestion du tour */
        socket.on("update_turn", (currentTurn) => {
            const turnIndicator = document.getElementById("turn-indicator");
            turnIndicator.textContent = currentTurn === userName ? "Votre tour !" : "Tour de l'adversaire";
        });

        /** ‚ùå D√©connexion du joueur */
        socket.on("disconnect", () => {
            console.warn("‚ùå Vous avez √©t√© d√©connect√© du serveur.");
            alert("Vous avez √©t√© d√©connect√© du serveur. Retour √† l'accueil.");
            window.location.href = "/";
        });

        /** ‚ö†Ô∏è D√©connexion de l'adversaire */
        socket.on("opponent_disconnected", () => {
            console.warn("‚ùå L'adversaire s'est d√©connect√©.");
            alert("Votre adversaire a quitt√© la partie. Retour √† l'accueil.");
            window.location.href = "/";
        });

        /** ‚úÖ Reconnexion d'un adversaire */
        socket.on("opponent_reconnected", (data) => {
            console.log(`‚úÖ ${data.name} est revenu !`);

            document.querySelector(".opponent-name").textContent = data.name;
            document.querySelector(".opponent-avatar img").src = data.avatar;

            document.getElementById("disconnect-overlay").classList.add("hidden");
        });

    } catch (error) {
        console.error("‚ùå Erreur lors de l'initialisation du jeu :", error);
        alert("Une erreur est survenue, retour √† l'accueil.");
        window.location.href = "/";
    }
});