document.addEventListener("DOMContentLoaded", () => {
    console.log("üîÑ Initialisation du jeu...");

    // R√©cup√©ration des donn√©es stock√©es
    const userName = sessionStorage.getItem("userName");
    const userAvatar = sessionStorage.getItem("userAvatar");
    const roomId = sessionStorage.getItem("roomId");

    console.log("üìå V√©rification des donn√©es avant connexion :", { roomId, userName, userAvatar });

    if (!userName || !userAvatar || !roomId) {
        console.error("‚ùå Donn√©es de session incompl√®tes !");
        alert("Erreur : Donn√©es utilisateur manquantes. Retour √† l'accueil.");
        window.location.href = "/";
        return;
    }

    // Mise √† jour de l'interface utilisateur
    document.getElementById("player-name").textContent = userName;
    document.getElementById("player-avatar").src = userAvatar;

    // Connexion au serveur WebSocket via socketManager.js
    const socket = io();

    socket.emit("join_game", { roomId, name: userName, avatar: userAvatar });

    socket.on("game_start", (gameData) => {
        console.log("‚úÖ Game start re√ßu :", gameData);

        if (!gameData.players || gameData.players.length < 2) {
            console.warn("‚ö†Ô∏è Aucun adversaire trouv√© !");
            return;
        }

        const opponent = gameData.players.find(p => p.name !== userName);
        if (opponent) {
            console.log(`üéÆ D√©but du jeu contre ${opponent.name}`);
            document.getElementById("opponent-name").textContent = opponent.name;
            document.getElementById("opponent-avatar").src = opponent.avatar;
        }
    });

    /** Mise √† jour du tour */
    socket.on("update_turn", (currentTurn) => {
        document.getElementById("turn-indicator").textContent =
            currentTurn === userName ? "Votre tour !" : `Tour de ${currentTurn}`;
    });

    /** Affichage des mains */
    socket.on("update_hands", ({ playerDeck, opponentDeck }) => {
        displayHand(playerDeck, document.getElementById("player-hand"));
        displayOpponentHand(opponentDeck, document.getElementById("opponent-hand"));
    });

    function displayHand(deck, handContainer) {
        handContainer.innerHTML = "";
        deck.forEach(card => {
            const cardElement = document.createElement("img");
            cardElement.src = card.image;
            cardElement.classList.add("card");
            handContainer.appendChild(cardElement);
        });
    }

    function displayOpponentHand(deck, handContainer) {
        handContainer.innerHTML = "";
        for (let i = 0; i < deck.length; i++) {
            const cardElement = document.createElement("div");
            cardElement.classList.add("card-back");
            handContainer.appendChild(cardElement);
        }
    }

    /** Gestion des d√©connexions */
    socket.on("player_disconnected", () => {
        console.warn("‚ùå L'adversaire s'est d√©connect√© !");
        alert("Votre adversaire a quitt√© la partie. Retour √† l'accueil.");
        window.location.href = "/";
    });

    socket.on("disconnect", () => {
        console.warn("‚ùå D√©connexion d√©tect√©e !");
        alert("Vous avez √©t√© d√©connect√© du serveur.");
        window.location.href = "/";
    });
});