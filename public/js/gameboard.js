import Deck from "./deck.js";

document.addEventListener("DOMContentLoaded", () => {
    const socket = io();
    const playerNameElement = document.querySelector(".player-name");
    const playerAvatarElement = document.querySelector(".player-avatar img");
    const opponentNameElement = document.querySelector(".opponent-name");
    const opponentAvatarElement = document.querySelector(".opponent-avatar img");
    const playerHand = document.getElementById("player-hand");
    const opponentHand = document.getElementById("opponent-hand");
    const turnIndicator = document.getElementById("turn-indicator");

    // üîç V√©rification des donn√©es utilisateur
    const userName = sessionStorage.getItem("userName");
    const userAvatar = sessionStorage.getItem("userAvatar") || "/Avatars/default.jpeg";
    const roomId = sessionStorage.getItem("roomId");

    console.log("üìå V√©rification des donn√©es avant de charger `gameboard.html`");
    console.log("üîç `roomId` :", roomId);
    console.log("üîç `userName` :", userName);
    console.log("üîç `userAvatar` :", userAvatar);

    if (!userName || !userAvatar || !roomId) {
        console.error("‚ö†Ô∏è Donn√©es de session incompl√®tes !");
        alert("Erreur : session corrompue. Retour √† l'accueil.");
        window.location.href = "/";
        return;
    }

    console.log(`üìå Connexion en cours pour ${userName} avec avatar ${userAvatar} dans la room ${roomId}`);

    // Mise √† jour des informations du joueur
    playerNameElement.textContent = userName;
    playerAvatarElement.src = userAvatar;

    // Demande de rejoindre la partie
    socket.emit("join_game", { roomId, name: userName, avatar: userAvatar });

    /** ‚úÖ D√©marrage du jeu */
    socket.on("game_start", (gameData) => {
        console.log("‚úÖ Game start re√ßu :", gameData);

        if (!gameData.opponent) {
            console.warn("‚ö†Ô∏è Aucun adversaire trouv√© !");
            return;
        }

        console.log(`üéÆ D√©but du jeu pour ${userName}. Adversaire : ${gameData.opponent.name}`);

        // Mise √† jour des informations de l'adversaire
        opponentNameElement.textContent = gameData.opponent.name;
        opponentAvatarElement.src = gameData.opponent.avatar;

        // V√©rification de l'avatar stock√©
        console.log("üé≠ Avatar re√ßu pour l'adversaire :", gameData.opponent.avatar);
    });

    /** ‚úÖ Gestion des d√©connexions */
    socket.on("player_disconnected", () => {
        console.warn("‚ùå L'adversaire s'est d√©connect√©. Retour √† l'accueil.");
        alert("Votre adversaire a quitt√© la partie. Retour √† l'accueil.");
        window.location.href = "/";
    });

    socket.on("disconnect", () => {
        console.warn("‚ùå Vous avez √©t√© d√©connect√© du serveur. Retour √† l'accueil.");
        alert("Vous avez √©t√© d√©connect√© du serveur. Retour √† l'accueil.");
        window.location.href = "/";
    });
}); // ‚úÖ V√©rifier que cette accolade ferme bien `DOMContentLoaded`