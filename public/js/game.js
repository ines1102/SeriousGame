document.addEventListener("DOMContentLoaded", () => {
    console.log("üîÑ Initialisation du jeu...");

    // V√©rification des donn√©es stock√©es dans sessionStorage
    let userName = sessionStorage.getItem("userName");
    let userAvatar = sessionStorage.getItem("userAvatar");
    let roomId = sessionStorage.getItem("roomId");

    console.log("üìå V√©rification des donn√©es avant connexion :", { roomId, userName, userAvatar });

    // Si les donn√©es sont manquantes, tentative de r√©cup√©ration apr√®s un court d√©lai
    setTimeout(() => {
        if (!userName || !userAvatar || !roomId) {
            console.warn("‚ö†Ô∏è Donn√©es de session incompl√®tes, tentative de r√©cup√©ration...");

            userName = sessionStorage.getItem("userName");
            userAvatar = sessionStorage.getItem("userAvatar");
            roomId = sessionStorage.getItem("roomId");

            console.log("üìå V√©rification apr√®s r√©cup√©ration :", { roomId, userName, userAvatar });
        }

        if (!userName || !userAvatar || !roomId) {
            console.error("‚ùå √âchec : Donn√©es toujours incompl√®tes, retour √† l'accueil.");
            alert("Erreur : Donn√©es utilisateur manquantes. Retour √† l'accueil.");
            window.location.href = "/";
            return;
        }

        console.log(`üìå Connexion en cours pour ${userName} avec avatar ${userAvatar} dans la room ${roomId}`);

        const socket = io();

        /** ‚úÖ Gestion de la connexion au serveur */
        socket.on("connect", () => {
            console.log(`‚úÖ Connexion √©tablie avec succ√®s !`);

            // Envoi des informations du joueur pour rejoindre la partie
            socket.emit("join_game", { roomId, name: userName, avatar: userAvatar });
        });

        /** ‚úÖ √âv√©nement : d√©marrage du jeu */
        socket.on("game_start", (gameData) => {
            console.log("‚úÖ Game start re√ßu :", gameData);

            if (!gameData.player1 || !gameData.player2) {
                console.warn("‚ö†Ô∏è Joueurs manquants dans la game_start !");
                return;
            }

            // Affichage des profils des joueurs
            console.log(`üéÆ D√©but du jeu pour ${userName}. Adversaire : ${gameData.player2.name}`);

            document.querySelector(".player-name").textContent = gameData.player1.name;
            document.querySelector(".player-avatar img").src = gameData.player1.avatar;

            document.querySelector(".opponent-name").textContent = gameData.player2.name;
            document.querySelector(".opponent-avatar img").src = gameData.player2.avatar;
        });

        /** ‚úÖ √âv√©nement : confirmation que les deux joueurs sont pr√™ts */
        socket.on("players_ready", (data) => {
            console.log("‚úÖ Confirmation : Les deux joueurs sont bien connect√©s.", data);

            // Mise √† jour des profils des joueurs
            document.querySelector(".player-name").textContent = data.player1.name;
            document.querySelector(".player-avatar img").src = data.player1.avatar;

            document.querySelector(".opponent-name").textContent = data.player2.name;
            document.querySelector(".opponent-avatar img").src = data.player2.avatar;
        });

        /** ‚úÖ √âv√©nement : d√©connexion de l'adversaire */
        socket.on("opponent_disconnected", () => {
            console.warn("‚ùå L'adversaire s'est d√©connect√© !");
            alert("Votre adversaire a quitt√© la partie. Retour √† l'accueil.");

            // Nettoyer les donn√©es et rediriger
            sessionStorage.removeItem("userName");
            sessionStorage.removeItem("userAvatar");
            sessionStorage.removeItem("roomId");

            window.location.href = "/";
        });

        /** ‚úÖ √âv√©nement : reconnexion de l'adversaire */
        socket.on("opponent_reconnected", (data) => {
            console.log(`‚úÖ ${data.name} est revenu !`);

            // Mise √† jour imm√©diate du profil de l'adversaire
            document.querySelector(".opponent-name").textContent = data.name;
            document.querySelector(".opponent-avatar img").src = data.avatar;

            // Suppression du message de d√©connexion
            document.getElementById("disconnect-overlay").classList.add("hidden");
        });

        /** ‚úÖ Gestion de la d√©connexion du joueur */
        socket.on("disconnect", () => {
            console.warn("‚ùå Vous avez √©t√© d√©connect√© du serveur. V√©rification en cours...");

            setTimeout(() => {
                if (!socket.connected) {
                    console.error("‚ùå D√©connexion permanente. Redirection vers l'accueil.");
                    alert("Vous avez √©t√© d√©connect√© du serveur. Retour √† l'accueil.");

                    // Nettoyage de la session
                    sessionStorage.removeItem("userName");
                    sessionStorage.removeItem("userAvatar");
                    sessionStorage.removeItem("roomId");

                    window.location.href = "/";
                } else {
                    console.log("üîÑ Reconnexion d√©tect√©e, suppression du message de d√©connexion.");
                    document.getElementById("disconnect-overlay").classList.add("hidden");
                }
            }, 3000);
        });

        /** ‚úÖ Gestion de la reconnexion automatique */
        socket.on("reconnect", () => {
            console.log("üîÑ Reconnexion d√©tect√©e, suppression du message de d√©connexion.");
            document.getElementById("disconnect-overlay").classList.add("hidden");

            // R√©envoi des informations du joueur apr√®s reconnexion
            socket.emit("rejoin_game", { roomId, name: userName, avatar: userAvatar });
        });

    }, 300);
});