document.addEventListener("DOMContentLoaded", () => {
    console.log("üîÑ Initialisation du jeu...");

    // V√©rification et r√©cup√©ration des donn√©es utilisateur
    let userName = sessionStorage.getItem("userName");
    let userAvatar = sessionStorage.getItem("userAvatar");
    let roomId = sessionStorage.getItem("roomId");

    console.log("üìå V√©rification des donn√©es avant connexion :", { roomId, userName, userAvatar });

    // üîç Double v√©rification avec un l√©ger d√©lai pour garantir que les donn√©es sont bien stock√©es
    setTimeout(() => {
        if (!userName || !userAvatar || !roomId) {
            console.warn("‚ö†Ô∏è Donn√©es de session incompl√®tes, tentative de r√©cup√©ration...");

            userName = sessionStorage.getItem("userName");
            userAvatar = sessionStorage.getItem("userAvatar");
            roomId = sessionStorage.getItem("roomId");

            console.log("üìå V√©rification apr√®s r√©cup√©ration :", { roomId, userName, userAvatar });
        }

        if (!userName || !userAvatar || !roomId) {
            console.error("‚ùå √âchec : Donn√©es toujours incompl√®tes, retour √† l'accueil.");
            alert("Erreur : Donn√©es utilisateur manquantes. Retour √† l'accueil.");
            window.location.href = "/";
            return;
        }

        console.log(`üìå Connexion en cours pour ${userName} avec avatar ${userAvatar} dans la room ${roomId}`);

        const socket = io();
        socket.emit("join_game", { roomId, name: userName, avatar: userAvatar });

        /** ‚úÖ D√©marrage du jeu */
        socket.on("game_start", (gameData) => {
            console.log("‚úÖ Game start re√ßu :", gameData);

            if (!gameData.opponent) {
                console.warn("‚ö†Ô∏è Aucun adversaire trouv√© !");
                return;
            }

            console.log(`üéÆ D√©but du jeu pour ${userName}. Adversaire : ${gameData.opponent.name}`);

            // Mise √† jour de l'adversaire dans l'interface
            document.querySelector(".opponent-name").textContent = gameData.opponent.name;
            document.querySelector(".opponent-avatar img").src = gameData.opponent.avatar;

            // V√©rification de l'avatar re√ßu
            console.log("üé≠ Avatar re√ßu pour l'adversaire :", gameData.opponent.avatar);
        });

        /** ‚úÖ Gestion des d√©connexions */
        socket.on("player_disconnected", () => {
            console.warn("‚ùå L'adversaire s'est d√©connect√©. Retour √† l'accueil.");
            alert("Votre adversaire a quitt√© la partie. Retour √† l'accueil.");
            window.location.href = "/";
        });

        socket.on("disconnect", () => {
            console.warn("‚ùå Vous avez √©t√© d√©connect√© du serveur. Retour √† l'accueil.");
            alert("Vous avez √©t√© d√©connect√© du serveur. Retour √† l'accueil.");
            window.location.href = "/";
        });

    }, 300); // ‚úÖ Ajout d'un d√©lai de 300ms pour garantir la r√©cup√©ration des donn√©es
});